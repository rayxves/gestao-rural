{
  "name": "Extrair_dados_registro",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "extrair_dados",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -40,
        0
      ],
      "id": "381acb20-8520-44f8-93d3-1c7f20907f36",
      "name": "Webhook",
      "webhookId": "c9766c57-7f89-43d6-b8b4-9de68637a8a5"
    },
    {
      "parameters": {
        "jsCode": "let output = $input.first().json.output;\n\noutput = output.replace(/```json|```/g, '').trim();\n\nlet parsed;\ntry {\n  parsed = JSON.parse(output);\n} catch (e) {\n  return [{\n    json: {\n      erro: \"A resposta da IA n√£o est√° em JSON v√°lido mesmo ap√≥s a limpeza.\",\n      conteudo_original: output\n    }\n  }];\n}\n\nif (!parsed.tool || !parsed.text) {\n  return [{\n    json: {\n      erro: \"Campos obrigat√≥rios 'tool' ou 'text' ausentes.\",\n      conteudo: parsed\n    }\n  }];\n}\n\nconst result = {\n  tool: parsed.tool,\n  text: parsed.text\n};\n\nif (parsed.dados) {\n  result.dados = parsed.dados;\n}\n\nreturn [{ json: result }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        920,
        -20
      ],
      "id": "96775bee-b1ec-4248-a08c-2cac01005a93",
      "name": "extrair_dados_ia"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Webhook').first().json.body.text }}",
        "options": {
          "systemMessage": "Voc√™ √© uma assistente agr√≠cola inteligente. Sua fun√ß√£o √© extrair dados da mensagem do usu√°rio e gerar uma mensagem de confirma√ß√£o.\n\nüéØ Objetivo da tarefa:\n\nExtrair corretamente os campos obrigat√≥rios conforme o tipo de registro.\n\nValidar se todos os dados obrigat√≥rios est√£o presentes e est√£o no formato correto.\n\nRetornar os dados extra√≠dos + a mensagem de confirma√ß√£o em formato JSON v√°lido.\n\n‚ùó N√£o salve nada. N√£o envie mensagens diretamente. Apenas prepare os dados.\n\nüìã Campos obrigat√≥rios e tipos esperados por tipo de registro:\n\nPlantio\n\ncultura: texto\n\ndata_plantio: data no formato DD/MM/AAAA\n\narea_plantada: n√∫mero\n\nColheita\n\ncultura: texto\n\ndata_colheita: data no formato DD/MM/AAAA\n\nquantidade: n√∫mero\n\nVenda\n\ncultura: texto\n\ndata_venda: data no formato DD/MM/AAAA\n\nquantidade: n√∫mero\n\nvalor_total: n√∫mero\n\nGasto\n\ntipo: texto\n\ndata_gasto: data no formato DD/MM/AAAA\n\nvalor: n√∫mero\n\ndescricao: texto (opcional)\n\nSe a descri√ß√£o estiver ausente ou for algo como \"sem descri√ß√£o\", defina \"descricao\": null\n\nInsumo\n\nnome: texto\n\ntipo: texto\n\nquantidade: n√∫mero\n\npreco_unitario: n√∫mero\n\nTrabalho\n\ndescricao: texto\n\nresponsavel: texto\n\ncusto: n√∫mero (ignore palavras como \"R$\", \"reais\", etc.)\n\nüö´ Ignore unidades como \"hectares\", \"R$\", \"kg\", \"litros\", \"sacas\", etc.\n\nüìå Sobre a propriedade (regra obrigat√≥ria):\n\nO campo \"propriedade_id\" sempre deve estar presente nos dados e pode ser null.\n\nO usu√°rio nunca informa o ID da propriedade diretamente.\n\nSe o nome da propriedade for informado:\n\nInclua o campo \"propriedade_nome\" com o nome\n\nDefina \"propriedade_id\": null\n\nSe o nome da propriedade n√£o for informado:\n\nDefina \"propriedade_id\": null\n\nN√£o inclua o campo propriedade_nome\n\nA mensagem de confirma√ß√£o para o usu√°rio deve mencionar o nome da propriedade apenas se ele tiver sido informado.\n\nNunca mencione \"propriedade_id\" ou qualquer n√∫mero de ID para o usu√°rio.\n\nüì§ Formato obrigat√≥rio da resposta:\n\njson\nCopiar\nEditar\n{\n  \"tool\": \"enviar_mensagem_usuario\",\n  \"text\": \"üå± Confirme os dados:\\n\\n<resumo dos dados extra√≠dos em texto>\\n\\nDigite *sim* para confirmar ou *n√£o* para corrigir.\",\n  \"dados\": {\n    <dados extra√≠dos, com os campos obrigat√≥rios e propriedade_id>\n  }\n}\nüìå Exemplo com nome da propriedade informado:\n\njson\nCopiar\nEditar\n{\n  \"tool\": \"enviar_mensagem_usuario\",\n  \"text\": \"üå± Confirme os dados:\\n\\nCultura: soja\\nData: 21/06/2025\\n√Årea: 10 hectares\\nPropriedade: Fazenda Santa Luzia\\n\\nDigite *sim* para confirmar ou *n√£o* para corrigir.\",\n  \"dados\": {\n    \"cultura\": \"soja\",\n    \"data_plantio\": \"21/06/2025\",\n    \"area_plantada\": 10,\n    \"propriedade_nome\": \"Fazenda Santa Luzia\",\n    \"propriedade_id\": null\n  }\n}\nüìå Exemplo sem nome da propriedade informado:\n\njson\nCopiar\nEditar\n{\n  \"tool\": \"enviar_mensagem_usuario\",\n  \"text\": \"üå± Confirme os dados:\\n\\nCultura: soja\\nData: 21/06/2025\\n√Årea: 10 hectares\\n\\nDigite *sim* para confirmar ou *n√£o* para corrigir.\",\n  \"dados\": {\n    \"cultura\": \"soja\",\n    \"data_plantio\": \"21/06/2025\",\n    \"area_plantada\": 10,\n    \"propriedade_id\": null\n  }\n}\n‚ùó Restri√ß√µes Importantes\nPara qualquer mensagem que n√£o contenha dados de registro. Isso inclui sauda√ß√µes (\"Oi\", \"Ol√°\", \"bom dia\"), conversas casuais (\"kkk\", \"tudo bem?\"), pedidos para editar ou excluir registros, ou qualquer outra solicita√ß√£o que n√£o seja o fornecimento de dados para um dos tipos de registro especificados, retorne:\n{\n\"tool\": \"\"\n}\n\n‚ùóCaso o usuario n√£o informe todos os dados necess√°rios ou informe dados incompletos, por exemplo: \"plantei milho 25/06 10 hectares\" faltou informar o ano, ou \"plantei milho 10 hectares\" faltou informar a data, quando isso ocorrer retorne uma mensagem informando quais os dados que precisam ser informados. Exemplo:\n{\n\"tool\": \"\",\n\"text\": \"Campo data √© obrigat√≥rio, por favor, envie os dados novamente no formato correto\".\n}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        460,
        0
      ],
      "id": "8c926b11-0bac-4964-a954-73cf6f4d0c08",
      "name": "AI_que_extrai_dados_registro",
      "executeOnce": true
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        460,
        220
      ],
      "id": "910ba0b2-0bca-4f31-b52a-25ba8af9fa06",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "sTS9JfuVz7vC4JXq",
          "name": "ray"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Webhook').first().json.body.chat_id }}",
        "tableName": "dados_extraidos_chat_histories"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        560,
        240
      ],
      "id": "f86d4a66-e042-439b-98bd-61e4f20f258b",
      "name": "Postgres Chat Memory1",
      "credentials": {
        "postgres": {
          "id": "Sbkkcbe1C8LiOSmB",
          "name": "gestao_rural"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1140,
        -20
      ],
      "id": "2f4966eb-b83f-4ead-b38d-10cd21b72b14",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "operation": "deleteTable",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "dados_extraidos_chat_histories",
          "mode": "list",
          "cachedResultName": "dados_extraidos_chat_histories"
        },
        "deleteCommand": "delete",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1340,
        -20
      ],
      "id": "78b00b71-c573-4fd3-9986-97acf6a207b9",
      "name": "Postgres",
      "credentials": {
        "postgres": {
          "id": "Sbkkcbe1C8LiOSmB",
          "name": "gestao_rural"
        }
      }
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "api.teste.onlinecenter.com.br",
            "user-agent": "axios/1.8.3",
            "content-length": "115",
            "accept": "application/json,text/html,application/xhtml+xml,application/xml,text/*;q=0.9, image/*;q=0.8, */*;q=0.7",
            "accept-encoding": "gzip, compress, deflate, br",
            "content-type": "application/json",
            "x-forwarded-for": "172.18.0.1",
            "x-forwarded-host": "api.teste.onlinecenter.com.br",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "fd2d6166e5b9",
            "x-real-ip": "172.18.0.1"
          },
          "params": {},
          "query": {},
          "body": {
            "text": "Vendi milho em 05/07/2025, 50 sacas por 3000 reais na propriedade fazenda da rayssa",
            "chat_id": 6517023574
          },
          "webhookUrl": "https://api.teste.onlinecenter.com.br/webhook/extrair_dados",
          "executionMode": "production"
        }
      }
    ]
  },
  "connections": {
    "AI_que_extrai_dados_registro": {
      "main": [
        [
          {
            "node": "extrair_dados_ia",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI_que_extrai_dados_registro",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory1": {
      "ai_memory": [
        [
          {
            "node": "AI_que_extrai_dados_registro",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "AI_que_extrai_dados_registro",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "extrair_dados_ia": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Respond to Webhook": {
      "main": [
        [
          {
            "node": "Postgres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "9205f51a-5bf9-42fd-909b-87ee47568bc0",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "9aab45911b97299333480ee93b3a756a301732a8d3c5c2882e1becb4b9fe223a"
  },
  "id": "FfTkeKzYGwmiLB6f",
  "tags": []
}